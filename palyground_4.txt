@SudheerUrade ➜ /workspaces/npci-advconfig-playground-challenge-4-SudheerUrade (main) $ kubectl version
Client Version: v1.28.3
Kustomize Version: v5.0.4-0.20230601165947-6ce0bf390ce3
Server Version: v1.21.3+k3s1
WARNING: version difference between client (1.28) and server (1.21) exceeds the supported minor version skew of +/-1
@SudheerUrade ➜ /workspaces/npci-advconfig-playground-challenge-4-SudheerUrade (main) $ ll
total 12K
-rw-rw-rw-  1 vscode root  996 Feb 22 08:55 cassandra.yaml
drwxrwxrwx+ 3 vscode root 4.0K Feb 22 08:55 cli
-rw-rw-rw-  1 vscode root 2.7K Feb 22 08:55 README.md
@SudheerUrade ➜ /workspaces/npci-advconfig-playground-challenge-4-SudheerUrade (main) $ vi cassandra.yaml 
@SudheerUrade ➜ /workspaces/npci-advconfig-playground-challenge-4-SudheerUrade (main) $ 
@SudheerUrade ➜ /workspaces/npci-advconfig-playground-challenge-4-SudheerUrade (main) $ 
@SudheerUrade ➜ /workspaces/npci-advconfig-playground-challenge-4-SudheerUrade (main) $ 
@SudheerUrade ➜ /workspaces/npci-advconfig-playground-challenge-4-SudheerUrade (main) $ kubectl apply -f cassandra.yaml

statefulset.apps/cassandra created
service/cassandra created
@SudheerUrade ➜ /workspaces/npci-advconfig-playground-challenge-4-SudheerUrade (main) $ kubectl get pods 
NAME          READY   STATUS    RESTARTS   AGE
cassandra-0   1/1     Running   0          24s
cassandra-1   1/1     Running   0          9s
@SudheerUrade ➜ /workspaces/npci-advconfig-playground-challenge-4-SudheerUrade (main) $ kubectl get service
NAME         TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)    AGE
kubernetes   ClusterIP   10.43.0.1    <none>        443/TCP    8m14s
cassandra    ClusterIP   None         <none>        9042/TCP   35s
@SudheerUrade ➜ /workspaces/npci-advconfig-playground-challenge-4-SudheerUrade (main) $ kubectl exec -it cassandra-0 ba
sh
kubectl exec [POD] [COMMAND] is DEPRECATED and will be removed in a future version. Use kubectl exec [POD] -- [COMMAND] instead.
root@cassandra-0:/# nodetool status
Datacenter: datacenter1
=======================
Status=Up/Down
|/ State=Normal/Leaving/Joining/Moving
--  Address    Load        Tokens  Owns (effective)  Host ID                               Rack 
UN  10.42.0.5  119.8 KiB   16      100.0%            d9878281-0ae4-4533-bf66-fd48bf32e688  rack1
UN  10.42.0.6  119.75 KiB  16      100.0%            3ab293bc-3bbc-424f-9358-d0f0171c0afb  rack1

root@cassandra-0:/# nodetool --help
nodetool: Found unexpected parameters: [--help]
See 'nodetool help' or 'nodetool help <command>'.
root@cassandra-0:/# nodetool help
usage: nodetool [(-u <username> | --username <username>)]
        [(-pw <password> | --password <password>)] [(-h <host> | --host <host>)]
        [(-pp | --print-port)] [(-p <port> | --port <port>)]
        [(-pwf <passwordFilePath> | --password-file <passwordFilePath>)] <command>
        [<args>]

The most commonly used nodetool commands are:
    assassinate                         Forcefully remove a dead node without re-replicating any data.  Use as a last resort if you cannot removenode
    bootstrap                           Monitor/manage node's bootstrap process
    checktokenmetadata                  compares the Gossip endpointState and TokenMetadata cache; printing any mismatches found
    cidrfilteringstats                  Print statistics on CIDR filtering
    cleanup                             Triggers the immediate cleanup of keys no longer belonging to a node. By default, clean all keyspaces
    clearsnapshot                       Remove the snapshot with the given name from the given keyspaces
    clientstats                         Print information about connected clients
    compact                             Force a (major) compaction on one or more tables or user-defined compaction on given SSTables
    compactionhistory                   Print history of compaction
    compactionstats                     Print statistics on compactions
    datapaths                           Print all directories where data of tables are stored
    decommission                        Decommission the *node I am connecting to*
    describecluster                     Print the name, snitch, partitioner and schema version of a cluster
    describering                        Shows the token ranges info of a given keyspace
    disableauditlog                     Disable the audit log
    disableautocompaction               Disable autocompaction for the given keyspace and table
    disablebackup                       Disable incremental backup
    disablebinary                       Disable native transport (binary protocol)
    disablefullquerylog                 Disable the full query log
    disablegossip                       Disable gossip (effectively marking the node down)
    disablehandoff                      Disable storing hinted handoffs
    disablehintsfordc                   Disable hints for a data center
    disableoldprotocolversions          Disable old protocol versions
    drain                               Drain the node (stop accepting writes and flush all tables)
    dropcidrgroup                       Drop an existing cidr group
    enableauditlog                      Enable the audit log
    enableautocompaction                Enable autocompaction for the given keyspace and table
    enablebackup                        Enable incremental backup
    enablebinary                        Reenable native transport (binary protocol)
    enablefullquerylog                  Enable full query logging, defaults for the options are configured in cassandra.yaml
    enablegossip                        Reenable gossip
    enablehandoff                       Reenable future hints storing on the current node
    enablehintsfordc                    Enable hints for a data center that was previsouly disabled
    enableoldprotocolversions           Enable old protocol versions
    failuredetector                     Shows the failure detector information for the cluster
    flush                               Flush one or more tables
    forcecompact                        Force a (major) compaction on a table
    garbagecollect                      Remove deleted data from one or more tables
    gcstats                             Print GC Statistics
    getauditlog                         Print configuration of audit log if enabled, otherwise the configuration reflected in cassandra.yaml
    getauthcacheconfig                  Get configuration of Auth cache
    getbatchlogreplaythrottle           Print batchlog replay throttle in KB/s. This is reduced proportionally to the number of nodes in the cluster.
    getcidrgroupsofip                   Print CIDR groups associated with given IP
    getcolumnindexsize                  Print the granularity of the collation index of rows within a partition in KiB
    getcompactionthreshold              Print min and max compaction thresholds for a given table
    getcompactionthroughput             Print the MiB/s throughput cap for compaction in the system as a rounded number
    getconcurrency                      Get maximum concurrency for processing stages
    getconcurrentcompactors             Get the number of concurrent compactors in the system.
    getconcurrentviewbuilders           Get the number of concurrent view builders in the system
    getdefaultrf                        Gets default keyspace replication factor.
    getendpoints                        Print the end points that owns the key
    getfullquerylog                     Print configuration of fql if enabled, otherwise the configuration reflected in cassandra.yaml
    getinterdcstreamthroughput          Print the throughput cap for inter-datacenter streaming and entire SSTable inter-datacenter streaming in the systemin rounded megabits. For precise number, please, use option -d
    getlogginglevels                    Get the runtime logging levels
    getmaxhintwindow                    Print the max hint window in ms
    getseeds                            Get the currently in use seed node IP list excluding the node IP
    getsnapshotthrottle                 Print the snapshot_links_per_second throttle for snapshot/clearsnapshot
    getsstables                         Print the sstable filenames that own the key
    getstreamthroughput                 Print the throughput cap for streaming and entire SSTable streaming in the system in rounded megabits. For precise number, please, use option -d
    gettimeout                          Print the timeout of the given type in ms
    gettraceprobability                 Print the current trace probability value
    gossipinfo                          Shows the gossip information for the cluster
    help                                Display help information
    import                              Import new SSTables to the system
    info                                Print node information (uptime, load, ...)
    invalidatecidrpermissionscache      Invalidate the cidr permissions cache
    invalidatecountercache              Invalidate the counter cache
    invalidatecredentialscache          Invalidate the credentials cache
    invalidatejmxpermissionscache       Invalidate the JMX permissions cache
    invalidatekeycache                  Invalidate the key cache
    invalidatenetworkpermissionscache   Invalidate the network permissions cache
    invalidatepermissionscache          Invalidate the permissions cache
    invalidaterolescache                Invalidate the roles cache
    invalidaterowcache                  Invalidate the row cache
    join                                Join the ring
    listcidrgroups                      List existing cidr groups
    listpendinghints                    Print all pending hints that this node has
    listsnapshots                       Lists all the snapshots along with the size on disk and true size. True size is the total size of all SSTables which are not backed up to disk. Size on disk is total size of the snapshot on disk. Total TrueDiskSpaceUsed does not make any SSTable deduplication.
    move                                Move node on the token ring to a new token
    netstats                            Print network information on provided host (connecting node by default)
    pausehandoff                        Pause hints delivery process
    profileload                         Low footprint profiling of activity for a period of time
    proxyhistograms                     Print statistic histograms for network operations
    rangekeysample                      Shows the sampled keys held across all keyspaces
    rebuild                             Rebuild data by streaming from other nodes (similarly to bootstrap)
    rebuild_index                       A full rebuild of native secondary indexes for a given table
    recompress_sstables                 Rewrite sstables (for the requested tables) that have compression configuration different from the current
    refresh                             Load newly placed SSTables to the system without restart
    refreshsizeestimates                Refresh system.size_estimates
    reloadcidrgroupscache               Reload CIDR groups cache with latest entries in cidr_groups table, when CIDR authorizer is enabled
    reloadlocalschema                   Reload local node schema from system tables
    reloadseeds                         Reload the seed node list from the seed node provider
    reloadssl                           Signals Cassandra to reload SSL certificates
    reloadtriggers                      Reload trigger classes
    relocatesstables                    Relocates sstables to the correct disk
    removenode                          Show status of current node removal, force completion of pending removal or remove provided ID
    repair                              Repair one or more tables
    repair_admin                        list and fail incremental repair sessions
    replaybatchlog                      Kick off batchlog replay and wait for finish
    resetfullquerylog                   Stop the full query log and clean files in the configured full query log directory from cassandra.yaml as well as JMX
    resetlocalschema                    Reset node's local schema and resync
    resumehandoff                       Resume hints delivery process
    ring                                Print information about the token ring
    scrub                               Scrub (rebuild sstables for) one or more tables
    setauthcacheconfig                  Set configuration for Auth cache
    setbatchlogreplaythrottle           Set batchlog replay throttle in KB per second, or 0 to disable throttling. This will be reduced proportionally to the number of nodes in the cluster.
    setcachecapacity                    Set global key, row, and counter cache capacities (in MB units)
    setcachekeystosave                  Set number of keys saved by each cache for faster post-restart warmup. 0 to disable
    setcolumnindexsize                  Set the granularity of the collation index of rows within a partition in KiB
    setcompactionthreshold              Set min and max compaction thresholds for a given table
    setcompactionthroughput             Set the MiB/s throughput cap for compaction in the system, or 0 to disable throttling
    setconcurrency                      Set maximum concurrency for processing stage
    setconcurrentcompactors             Set number of concurrent compactors in the system.
    setconcurrentviewbuilders           Set the number of concurrent view builders in the system
    setdefaultrf                        Sets default keyspace replication factor.
    sethintedhandoffthrottlekb          Set hinted handoff throttle in KiB per second, per delivery thread.
    setinterdcstreamthroughput          Set the throughput cap for inter-datacenter streaming and entire SSTable inter-datacenter streaming in the system, or 0 to disable throttling
    setlogginglevel                     Set the log level threshold for a given component or class. Will reset to the initial configuration if called with no parameters.
    setmaxhintwindow                    Set the specified max hint window in ms
    setsnapshotthrottle                 Set the snapshot_links_per_second cap for snapshot and clearsnapshot throttling
    setstreamthroughput                 Set throughput cap for streaming and entire SSTable streaming in the system, or 0 to disable throttling
    settimeout                          Set the specified timeout in ms, or 0 to disable timeout
    settraceprobability                 Sets the probability for tracing any given request to value. 0 disables, 1 enables for all requests, 0 is the default
    sjk                                 Run commands of 'Swiss Java Knife'. Run 'nodetool sjk --help' for more information.
    snapshot                            Take a snapshot of specified keyspaces or a snapshot of the specified table
    status                              Print cluster information (state, load, IDs, ...)
    statusautocompaction                status of autocompaction of the given keyspace and table
    statusbackup                        Status of incremental backup
    statusbinary                        Status of native transport (binary protocol)
    statusgossip                        Status of gossip
    statushandoff                       Status of storing future hints on the current node
    stop                                Stop compaction
    stopdaemon                          Stop cassandra daemon
    tablehistograms                     Print statistic histograms for a given table
    tablestats                          Print statistics on tables
    toppartitions                       Sample and print the most active partitions
    tpstats                             Print usage statistics of thread pools
    truncatehints                       Truncate all hints on the local node, or truncate hints for the endpoint(s) specified.
    updatecidrgroup                     Insert/Update a cidr group
    upgradesstables                     Rewrite sstables (for the requested tables) that are not on the current version (thus upgrading them to said current version)
    verify                              Verify (check data checksum for) one or more tables
    version                             Print cassandra version
    viewbuildstatus                     Show progress of a materialized view build

See 'nodetool help <command>' for more information on a specific command.

root@cassandra-0:/# nodetool info
ID                     : d9878281-0ae4-4533-bf66-fd48bf32e688
Gossip active          : true
Native Transport active: true
Load                   : 119.8 KiB
Uncompressed load      : 157.02 KiB
Generation No          : 1740215168
Uptime (seconds)       : 703
Heap Memory (MB)       : 320.95 / 4000.00
Off Heap Memory (MB)   : 0.00
Data Center            : datacenter1
Rack                   : rack1
Exceptions             : 0
Key Cache              : entries 9, size 728 bytes, capacity 100 MiB, 78 hits, 86 requests, 0.907 recent hit rate, 14400 save period in seconds
Row Cache              : entries 0, size 0 bytes, capacity 0 bytes, 0 hits, 0 requests, NaN recent hit rate, 0 save period in seconds
Counter Cache          : entries 0, size 0 bytes, capacity 50 MiB, 0 hits, 0 requests, NaN recent hit rate, 7200 save period in seconds
Network Cache          : size 8 MiB, overflow size: 0 bytes, capacity 128 MiB
Percent Repaired       : 100.0%
Token                  : (invoke with -T/--tokens to see all 16 tokens)
Bootstrap state        : COMPLETED
Bootstrap failed       : false
Decommissioning        : false
Decommission failed    : false
root@cassandra-0:/# nodetool cfstats
nodetool: Found unexpected parameters: [cfstats]
See 'nodetool help' or 'nodetool help <command>'.
root@cassandra-0:/# nodetool cfstat
nodetool: Found unexpected parameters: [cfstat]
See 'nodetool help' or 'nodetool help <command>'.
root@cassandra-0:/# 
root@cassandra-0:/# 
root@cassandra-0:/# 
root@cassandra-0:/# nodetool info | grep -i disk
root@cassandra-0:/# 
root@cassandra-0:/# 
root@cassandra-0:/# nodetool info
ID                     : d9878281-0ae4-4533-bf66-fd48bf32e688
Gossip active          : true
Native Transport active: true
Load                   : 119.8 KiB
Uncompressed load      : 157.02 KiB
Generation No          : 1740215168
Uptime (seconds)       : 963
Heap Memory (MB)       : 352.95 / 4000.00
Off Heap Memory (MB)   : 0.00
Data Center            : datacenter1
Rack                   : rack1
Exceptions             : 0
Key Cache              : entries 9, size 728 bytes, capacity 100 MiB, 80 hits, 88 requests, 0.909 recent hit rate, 14400 save period in seconds
Row Cache              : entries 0, size 0 bytes, capacity 0 bytes, 0 hits, 0 requests, NaN recent hit rate, 0 save period in seconds
Counter Cache          : entries 0, size 0 bytes, capacity 50 MiB, 0 hits, 0 requests, NaN recent hit rate, 7200 save period in seconds
Network Cache          : size 8 MiB, overflow size: 0 bytes, capacity 128 MiB
Percent Repaired       : 100.0%
Token                  : (invoke with -T/--tokens to see all 16 tokens)
Bootstrap state        : COMPLETED
Bootstrap failed       : false
Decommissioning        : false
Decommission failed    : false
root@cassandra-0:/# 
exit
@SudheerUrade ➜ /workspaces/npci-advconfig-playground-challenge-4-SudheerUrade (main) $ kubectl exec -it cassandra-1 bash

kubectl exec [POD] [COMMAND] is DEPRECATED and will be removed in a future version. Use kubectl exec [POD] -- [COMMAND] instead.
root@cassandra-1:/# nodetool info
ID                     : 3ab293bc-3bbc-424f-9358-d0f0171c0afb
Gossip active          : true
Native Transport active: true
Load                   : 119.75 KiB
Uncompressed load      : 157.08 KiB
Generation No          : 1740215171
Uptime (seconds)       : 1021
Heap Memory (MB)       : 157.46 / 4000.00
Off Heap Memory (MB)   : 0.00
Data Center            : datacenter1
Rack                   : rack1
Exceptions             : 0
Key Cache              : entries 19, size 1.59 KiB, capacity 100 MiB, 110 hits, 128 requests, 0.859 recent hit rate, 14400 save period in seconds
Row Cache              : entries 0, size 0 bytes, capacity 0 bytes, 0 hits, 0 requests, NaN recent hit rate, 0 save period in seconds
Counter Cache          : entries 0, size 0 bytes, capacity 50 MiB, 0 hits, 0 requests, NaN recent hit rate, 7200 save period in seconds
Network Cache          : size 8 MiB, overflow size: 0 bytes, capacity 128 MiB
Percent Repaired       : 100.0%
Token                  : (invoke with -T/--tokens to see all 16 tokens)
Bootstrap state        : COMPLETED
Bootstrap failed       : false
Decommissioning        : false
Decommission failed    : false
root@cassandra-1:/# cqlsh
Connected to TestCluster at 127.0.0.1:9042
[cqlsh 6.2.0 | Cassandra 5.0.3 | CQL spec 3.4.7 | Native protocol v5]
Use HELP for help.
cqlsh> desc table
Improper desc command.
cqlsh> \dt+ *
Invalid syntax at char 1
  \dt+ *
  ^
cqlsh> select * from user
   ... ;
InvalidRequest: Error from server: code=2200 [Invalid query] message="No keyspace has been specified. USE a keyspace, or explicitly specify keyspace.tablename"
cqlsh> select * from users ;
InvalidRequest: Error from server: code=2200 [Invalid query] message="No keyspace has been specified. USE a keyspace, or explicitly specify keyspace.tablename"
cqlsh> show tables
Improper show command.
cqlsh> show tables;
Improper show command.
cqlsh> DESCRIBE 
Improper DESCRIBE command.
cqlsh> DESCRIBE keyspaces

system       system_distributed  system_traces  system_virtual_schema
system_auth  system_schema       system_views 

cqlsh> use system;
cqlsh:system> desc tables;

available_ranges     paxos_repair_history  sstable_activity       
available_ranges_v2  peer_events           sstable_activity_v2    
batches              peer_events_v2        table_estimates        
built_views          peers                 top_partitions         
compaction_history   peers_v2              transferred_ranges     
"IndexInfo"          prepared_statements   transferred_ranges_v2  
local                repairs               view_builds_in_progress
paxos                size_estimates      

cqlsh:system> 
root@cassandra-1:/# cqlsh
Connected to TestCluster at 127.0.0.1:9042
[cqlsh 6.2.0 | Cassandra 5.0.3 | CQL spec 3.4.7 | Native protocol v5]
Use HELP for help.
cqlsh> DESCRIBE keyspaces

system       system_distributed  system_traces  system_virtual_schema
system_auth  system_schema       system_views 

cqlsh> use system;
cqlsh:system> desc tables;

available_ranges     paxos_repair_history  sstable_activity       
available_ranges_v2  peer_events           sstable_activity_v2    
batches              peer_events_v2        table_estimates        
built_views          peers                 top_partitions         
compaction_history   peers_v2              transferred_ranges     
"IndexInfo"          prepared_statements   transferred_ranges_v2  
local                repairs               view_builds_in_progress
paxos                size_estimates      

cqlsh:system> exit
root@cassandra-1:/# cqlsh
Connected to TestCluster at 127.0.0.1:9042
[cqlsh 6.2.0 | Cassandra 5.0.3 | CQL spec 3.4.7 | Native protocol v5]
Use HELP for help.
cqlsh> CREATE KEYSPACE user_data WITH replication = {
   ...   'class': 'SimpleStrategy',
   ...   'replication_factor': 2
   ... };
cqlsh> 
cqlsh> desc KEYSPACE
No keyspace specified and no current keyspace
cqlsh> desc KEYSPACES

system       system_distributed  system_traces  system_virtual_schema
system_auth  system_schema       system_views   user_data            

cqlsh> DESCRIBE KEYSPACE user_data;

CREATE KEYSPACE user_data WITH replication = {'class': 'SimpleStrategy', 'replication_factor': '2'}  AND durable_writes = true;
cqlsh> 
cqlsh> 
cqlsh> use user_data ;
cqlsh:user_data> CREATE TABLE users ( 
             ...  id PRIMARY KEY, 
             ...  name TEXT, 
             ...  email TEXT 
             ...  ); 
SyntaxException: line 2:4 no viable alternative at input 'PRIMARY' (CREATE TABLE users (  id [PRIMARY]...)
cqlsh:user_data> 
cqlsh:user_data> CREATE TABLE users ( 
             ...  id UUID PRIMARY KEY, 
             ...  name TEXT, 
             ...  email TEXT 
             ...  ); 
cqlsh:user_data> 
cqlsh:user_data> DESCRIBE user;
'user' not found in keyspace 'user_data'
cqlsh:user_data> DESCRIBE users;

CREATE TABLE user_data.users (
    id uuid PRIMARY KEY,
    email text,
    name text
) WITH additional_write_policy = '99p'
    AND allow_auto_snapshot = true
    AND bloom_filter_fp_chance = 0.01
    AND caching = {'keys': 'ALL', 'rows_per_partition': 'NONE'}
    AND cdc = false
    AND comment = ''
    AND compaction = {'class': 'org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy', 'max_threshold': '32', 'min_threshold': '4'}
    AND compression = {'chunk_length_in_kb': '16', 'class': 'org.apache.cassandra.io.compress.LZ4Compressor'}
    AND memtable = 'default'
    AND crc_check_chance = 1.0
    AND default_time_to_live = 0
    AND extensions = {}
    AND gc_grace_seconds = 864000
    AND incremental_backups = true
    AND max_index_interval = 2048
    AND memtable_flush_period_in_ms = 0
    AND min_index_interval = 128
    AND read_repair = 'BLOCKING'
    AND speculative_retry = '99p';
cqlsh:user_data> 
cqlsh:user_data> INSERT INTO users (id, name, email) VALUES ( uuid(), 'Alice','alice@example.com'); 
cqlsh:user_data> INSERT INTO users (id, name, email) VALUES ( uuid(), 'Terence','terence@example.com'); 
cqlsh:user_data> INSERT INTO users (id, name, email) VALUES ( uuid(), 'Mike','mike@example.com'); 
cqlsh:user_data> 
cqlsh:user_data> 
cqlsh:user_data> select * from users;

 id                                   | email               | name
--------------------------------------+---------------------+---------
 2d5a7cc7-76d5-46dd-bd9a-fe02a6e0af76 |   alice@example.com |   Alice
 1c887552-cbde-4e32-8778-0daf7108d5a0 | terence@example.com | Terence
 bf7b5055-f3d8-4d56-978b-8758134d1f96 |    mike@example.com |    Mike

(3 rows)
cqlsh:user_data> 
root@cassandra-1:/# 
exit
@SudheerUrade ➜ /workspaces/npci-advconfig-playground-challenge-4-SudheerUrade (main) $ kubectl exec -it cassandra-0 bas
h
kubectl exec [POD] [COMMAND] is DEPRECATED and will be removed in a future version. Use kubectl exec [POD] -- [COMMAND] instead.
root@cassandra-0:/# DESCRIBE user;
bash: DESCRIBE: command not found
root@cassandra-0:/# cqlsh
Connected to TestCluster at 127.0.0.1:9042
[cqlsh 6.2.0 | Cassandra 5.0.3 | CQL spec 3.4.7 | Native protocol v5]
Use HELP for help.
cqlsh> select * from user_data.users ;

 id                                   | email               | name
--------------------------------------+---------------------+---------
 2d5a7cc7-76d5-46dd-bd9a-fe02a6e0af76 |   alice@example.com |   Alice
 1c887552-cbde-4e32-8778-0daf7108d5a0 | terence@example.com | Terence
 bf7b5055-f3d8-4d56-978b-8758134d1f96 |    mike@example.com |    Mike

(3 rows)
cqlsh> DESCRIBE TABLE users;
No keyspace specified and no current keyspace
cqlsh> 
root@cassandra-0:/# cqlsh
Connected to TestCluster at 127.0.0.1:9042
[cqlsh 6.2.0 | Cassandra 5.0.3 | CQL spec 3.4.7 | Native protocol v5]
Use HELP for help.
cqlsh> desc user_data.users ;

CREATE TABLE user_data.users (
    id uuid PRIMARY KEY,
    email text,
    name text
) WITH additional_write_policy = '99p'
    AND allow_auto_snapshot = true
    AND bloom_filter_fp_chance = 0.01
    AND caching = {'keys': 'ALL', 'rows_per_partition': 'NONE'}
    AND cdc = false
    AND comment = ''
    AND compaction = {'class': 'org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy', 'max_threshold': '32', 'min_threshold': '4'}
    AND compression = {'chunk_length_in_kb': '16', 'class': 'org.apache.cassandra.io.compress.LZ4Compressor'}
    AND memtable = 'default'
    AND crc_check_chance = 1.0
    AND default_time_to_live = 0
    AND extensions = {}
    AND gc_grace_seconds = 864000
    AND incremental_backups = true
    AND max_index_interval = 2048
    AND memtable_flush_period_in_ms = 0
    AND min_index_interval = 128
    AND read_repair = 'BLOCKING'
    AND speculative_retry = '99p';
cqlsh> USE user_data ;
cqlsh:user_data> ALTER TABLE users WITH caching = {'keys': 'ALL', 'rows_per_partition':'10'};
cqlsh:user_data> desc user_data.users ;

CREATE TABLE user_data.users (
    id uuid PRIMARY KEY,
    email text,
    name text
) WITH additional_write_policy = '99p'
    AND allow_auto_snapshot = true
    AND bloom_filter_fp_chance = 0.01
    AND caching = {'keys': 'ALL', 'rows_per_partition': '10'}
    AND cdc = false
    AND comment = ''
    AND compaction = {'class': 'org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy', 'max_threshold': '32', 'min_threshold': '4'}
    AND compression = {'chunk_length_in_kb': '16', 'class': 'org.apache.cassandra.io.compress.LZ4Compressor'}
    AND memtable = 'default'
    AND crc_check_chance = 1.0
    AND default_time_to_live = 0
    AND extensions = {}
    AND gc_grace_seconds = 864000
    AND incremental_backups = true
    AND max_index_interval = 2048
    AND memtable_flush_period_in_ms = 0
    AND min_index_interval = 128
    AND read_repair = 'BLOCKING'
    AND speculative_retry = '99p';
cqlsh:user_data> 
cqlsh:user_data> select * from user;
InvalidRequest: Error from server: code=2200 [Invalid query] message="table user does not exist"
cqlsh:user_data> 
cqlsh:user_data> select * from users;

 id                                   | email               | name
--------------------------------------+---------------------+---------
 2d5a7cc7-76d5-46dd-bd9a-fe02a6e0af76 |   alice@example.com |   Alice
 1c887552-cbde-4e32-8778-0daf7108d5a0 | terence@example.com | Terence
 bf7b5055-f3d8-4d56-978b-8758134d1f96 |    mike@example.com |    Mike

(3 rows)
cqlsh:user_data> select * from users where apply index email;
SyntaxException: line 1:26 no viable alternative at input 'apply' (select * from users where [apply]...)
cqlsh:user_data> 
cqlsh:user_data> select * from users;

 id                                   | email               | name
--------------------------------------+---------------------+---------
 2d5a7cc7-76d5-46dd-bd9a-fe02a6e0af76 |   alice@example.com |   Alice
 1c887552-cbde-4e32-8778-0daf7108d5a0 | terence@example.com | Terence
 bf7b5055-f3d8-4d56-978b-8758134d1f96 |    mike@example.com |    Mike

(3 rows)
cqlsh:user_data> CREATE INDEX email_IDX ON users (email);
cqlsh:user_data> 
cqlsh:user_data> select * from users where email='';
cqlsh:user_data> select * from user where email='alice@example.com';
InvalidRequest: Error from server: code=2200 [Invalid query] message="table user does not exist"
cqlsh:user_data> select * from users where email='alice@example.com';

 id                                   | email             | name
--------------------------------------+-------------------+-------
 2d5a7cc7-76d5-46dd-bd9a-fe02a6e0af76 | alice@example.com | Alice

(1 rows)
cqlsh:user_data> CREATE TABLE users_new ( 
             ...  id UUID PRIMARY KEY, 
             ...  name TEXT, 
             ...  email TEXT 
             ...  ); 
cqlsh:user_data> 
cqlsh:user_data> INSERT INTO users_new (id, name, email) VALUES ( uuid(), 'Alice','alice@example.com');  
 users_new (id, name, email) VALUES ( uuid(), 'Tercqlsh:user_data> INSERT INTO users_new (id, name, email) VALUES ( uuid(), 'Terence','terence@example.com');  
cqlsh:user_data> INSERT INTO users_new (id, name, email) VALUES ( uuid(), 'Mike','mike@example.com'); 
cqlsh:user_data> 
cqlsh:user_data> 
cqlsh:user_data> select * from user_data.users_new ;

 id                                   | email               | name
--------------------------------------+---------------------+---------
 30e2b08f-ceb3-40bc-ac4a-abfa83bc68d9 |    mike@example.com |    Mike
 137b8a9d-e151-4e49-8f08-e7ad845ffeb3 | terence@example.com | Terence
 edc44790-799a-4db5-bf80-6e8a8922bd7b |   alice@example.com |   Alice

(3 rows)
cqlsh:user_data> select * from user_data.users_new where email='alice@example.com';;
InvalidRequest: Error from server: code=2200 [Invalid query] message="Cannot execute this query as it might involve data filtering and thus may have unpredictable performance. If you want to execute this query despite the performance unpredictability, use ALLOW FILTERING"
SyntaxException: line 1:0 no viable alternative at input ';' ([;])
cqlsh:user_data> select * from user_data.users_new where email='alice@example.com' ALLOW FILTERING;

 id                                   | email             | name
--------------------------------------+-------------------+-------
 edc44790-799a-4db5-bf80-6e8a8922bd7b | alice@example.com | Alice

(1 rows)
cqlsh:user_data> BEGIN BATCH
             ... INSERT INTO users (user_id, name, email) VALUES (uuid(), 'Priya', 'priya@example.com');
             ... INSERT INTO users (user_id, name, email) VALUES (uuid(), 'Shahid', 'shahid@example.com');
             ... APPLY BATCH;
InvalidRequest: Error from server: code=2200 [Invalid query] message="Undefined column name user_id in table user_data.users"
cqlsh:user_data> 
cqlsh:user_data> 
cqlsh:user_data> BEGIN BATCH
             ... INSERT INTO users (id, name, email) VALUES (uuid(), 'Priya', 'priya@example.com');
             ... INSERT INTO users (id, name, email) VALUES (uuid(), 'Shahid', 'shahid@example.com');
             ... APPLY BATCH;
cqlsh:user_data> 
cqlsh:user_data> 
cqlsh:user_data> select * from users;

 id                                   | email               | name
--------------------------------------+---------------------+---------
 c91a0f59-8619-4cfa-a228-708a30288526 |  shahid@example.com |  Shahid
 2d5a7cc7-76d5-46dd-bd9a-fe02a6e0af76 |   alice@example.com |   Alice
 eb4daef9-4e69-4bcf-8bea-db9e10dbc93e |   priya@example.com |   Priya
 1c887552-cbde-4e32-8778-0daf7108d5a0 | terence@example.com | Terence
 bf7b5055-f3d8-4d56-978b-8758134d1f96 |    mike@example.com |    Mike

(5 rows)
cqlsh:user_data> 